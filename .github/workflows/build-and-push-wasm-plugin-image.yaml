name: Build and Push Wasm Plugin Image

on:
  push:
    tags:
      - "wasm-*-*-v*.*.*" # 匹配 wasm-{go|rust}-{pluginName}-vX.Y.Z
  pull_request:
    types: [closed]
    paths:
      - 'plugins/wasm-go/extensions/**'
      - 'plugins/wasm-rust/extensions/**'
  workflow_dispatch:
    inputs:
      plugin_type:
        description: 'Type of the plugin'
        required: true
        type: choice
        options:
          - go
          - rust
      plugin_name:
        description: 'Name of the plugin'
        required: true
        type: string
      version:
        description: 'Version of the plugin (可选，无需 v 前缀)'
        required: false
        type: string

jobs:
  build-and-push-wasm-plugin-image:
    if: >
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    environment:
      name: image-registry-msg
    env:
      IMAGE_REGISTRY_SERVICE: ${{ vars.IMAGE_REGISTRY || 'higress-registry.cn-hangzhou.cr.aliyuncs.com' }}
      IMAGE_REPOSITORY: ${{ vars.PLUGIN_IMAGE_REPOSITORY || 'plugins' }}
      RUST_VERSION: 1.82
      GO_VERSION: 1.19
      TINYGO_VERSION: 0.28.1
      ORAS_VERSION: 1.0.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set plugin_type, plugin_name and version (从 tag、dispatch 或 option.yaml 获取)
        id: set_vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            plugin_type="${{ github.event.inputs.plugin_type }}"
            plugin_name="${{ github.event.inputs.plugin_name }}"
            version="${{ github.event.inputs.version }}"
          elif [[ "${{ github.event.ref_type }}" == "tag" ]]; then
            ref_name="${{ github.ref_name }}"
            plugin_type=${ref_name#wasm-}; plugin_type=${plugin_type%%-*}
            plugin_name=${ref_name#wasm-${plugin_type}-}; plugin_name=${plugin_name%-*}
            version=${ref_name##*v}
          else
            # PR 合并：自动从 option.yaml 中获取版本
            # 自动识别插件路径最新变更目录
            plugin_path=$(jq -r '.pull_request.changed_files' <<<"${{ toJson(github) }}" )
            plugin_type=$(echo "$plugin_path" | grep -oE 'wasm-(go|rust)' | head -1 | sed 's/wasm-//')
            plugin_name=$(echo "$plugin_path" | grep -oE "${plugin_type}/extensions/[^/]+" | head -1 | cut -d/ -f3)
            version=$(grep '^version:' plugins/wasm-${plugin_type}/extensions/${plugin_name}/option.yaml | head -1 | awk '{print $2}')
          fi

          echo "PLUGIN_TYPE=$plugin_type" >> $GITHUB_ENV
          echo "PLUGIN_NAME=$plugin_name" >> $GITHUB_ENV
          echo "VERSION=${version:-dev-${{ github.sha }}}" >> $GITHUB_ENV
          if [[ "$plugin_type" == "rust" ]]; then
            echo "BUILDER_IMAGE=higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/wasm-rust-builder:rust${RUST_VERSION}-oras${ORAS_VERSION}" >> $GITHUB_ENV
          else
            echo "BUILDER_IMAGE=higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/wasm-go-builder:go${GO_VERSION}-tinygo${TINYGO_VERSION}-oras${ORAS_VERSION}" >> $GITHUB_ENV
          fi

      - name: File Check
        run: |
          ws=plugins/wasm-${PLUGIN_TYPE}/extensions/${PLUGIN_NAME}
          push_cmd="./plugin.tar.gz:application/vnd.oci.image.layer.v1.tar+gzip"
          [[ -f "$ws/spec.yaml" ]] && echo "spec.yaml exists" && push_cmd="./spec.yaml:application/vnd.module.wasm.spec.v1+yaml $push_cmd"
          [[ -f "$ws/README.md" ]] && echo "README.md exists" && push_cmd="./README.md:application/vnd.module.wasm.doc.v1+markdown $push_cmd"
          for f in "$ws"/README_*.md; do
            [[ -f "$f" ]] && fn=$(basename "$f") && lang=${fn#README_}; lang=${lang%.md} && echo "$fn exists" && push_cmd="./$fn:application/vnd.module.wasm.doc.v1.${lang}+markdown $push_cmd"
          done
          echo "PUSH_COMMAND=$push_cmd" >> $GITHUB_ENV

      - name: Start builder
        run: |
          docker run -d --name builder \
            -v "${{ github.workspace }}:/workspace" \
            -e PLUGIN_NAME="$PLUGIN_NAME" \
            --rm "$BUILDER_IMAGE" /bin/bash

      - name: Build & Push
        run: |
          set -e
          tgt="${IMAGE_REGISTRY_SERVICE}/${IMAGE_REPOSITORY}/${PLUGIN_NAME}:${VERSION}"
          echo "Building & pushing to $tgt"
          docker exec builder bash -c "
            cd /workspace/plugins/wasm-${PLUGIN_TYPE}/extensions/${PLUGIN_NAME}
            [[ -f .buildrc ]] && source ./.buildrc
            if [[ '$PLUGIN_TYPE' == 'go' ]]; then
              go mod tidy
              tinygo build -o plugin.wasm -scheduler=none -target=wasi -gc=custom -tags=\"custommalloc nottinygc_finalizer \${EXTRA_TAGS}\"
            else
              [[ -f ./.prebuild ]] && source ./.prebuild
              rustup target add wasm32-wasip1
              cargo build --target wasm32-wasip1 --release
              cp target/wasm32-wasip1/release/*.wasm plugin.wasm
            fi
            tar czvf plugin.tar.gz plugin.wasm
            echo '${{ secrets.REGISTRY_PASSWORD }}' | oras login -u '${{ secrets.REGISTRY_USERNAME }}' --password-stdin '${IMAGE_REGISTRY_SERVICE}'
            oras push '${tgt}' $PUSH_COMMAND
            oras push '${IMAGE_REGISTRY_SERVICE}/${IMAGE_REPOSITORY}/${PLUGIN_NAME}:latest' $PUSH_COMMAND
          "

      - name: Clean up
        if: always()
        run: docker rm -f builder || true
