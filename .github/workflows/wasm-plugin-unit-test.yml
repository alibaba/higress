name: WASM Plugin Unit Tests(GO)

on:
  push:
    branches: [ main ]
    paths:
      - 'plugins/wasm-go/extensions/**'
      - '.github/workflows/wasm-plugin-unit-test.yml'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches: [ main ]
    paths:
      - 'plugins/wasm-go/extensions/**'
      - '.github/workflows/wasm-plugin-unit-test.yml'
      - 'go.mod'
      - 'go.sum'

env:
  GO111MODULE: on
  CGO_ENABLED: 0
  GOOS: linux
  GOARCH: amd64

jobs:
  detect-changed-plugins:
    name: Detect Changed Plugins
    runs-on: ubuntu-latest
    outputs:
      changed-plugins: ${{ steps.detect.outputs.plugins }}
      has-changes: ${{ steps.detect.outputs.has-changes }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于比较
        
    - name: Detect changed plugins
      id: detect
      run: |
        # 获取变更的文件列表
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # PR模式：比较目标分支和源分支
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
        else
          # Push模式：比较当前提交和上一个提交
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        fi
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # 提取变更的插件名称
        CHANGED_PLUGINS=""
        for file in $CHANGED_FILES; do
          if [[ $file =~ ^plugins/wasm-go/extensions/([^/]+)/ ]]; then
            PLUGIN_NAME="${BASH_REMATCH[1]}"
            if [[ ! " $CHANGED_PLUGINS " =~ " $PLUGIN_NAME " ]]; then
              CHANGED_PLUGINS="$CHANGED_PLUGINS $PLUGIN_NAME"
            fi
          fi
        done
        
        # 如果没有插件变更，不触发测试
        if [ -z "$CHANGED_PLUGINS" ]; then
          echo "No plugin changes detected, skipping tests"
          echo "has-changes=false" >> $GITHUB_OUTPUT
          echo "plugins=" >> $GITHUB_OUTPUT
        else
          echo "Changed plugins: $CHANGED_PLUGINS"
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "plugins=$CHANGED_PLUGINS" >> $GITHUB_OUTPUT
        fi

  test:
    name: Test Changed Plugins
    runs-on: ubuntu-latest
    needs: detect-changed-plugins
    if: needs.detect-changed-plugins.outputs.has-changes == 'true'
    strategy:
      matrix:
        plugin: ${{ fromJson(format('[{0}]', needs.detect-changed-plugins.outputs.changed-plugins)) }}
        go-version: [1.24]
        fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        
    - name: Install test tools
      run: |
        go install gotest.tools/gotestsum@latest
        # 移除gocov工具，直接使用Codecov
        
    - name: Build WASM for ${{ matrix.plugin }}
      working-directory: plugins/wasm-go/extensions/${{ matrix.plugin }}
      run: |
        echo "Building WASM for ${{ matrix.plugin }}..."
        
        # 检查是否存在main.go文件
        
        export GOOS=wasip1
        export GOARCH=wasm
        
        # 构建WASM文件，失败时直接退出
        if ! go build -buildmode=c-shared -o main.wasm ./; then
          echo "❌ WASM build failed for ${{ matrix.plugin }}"
          exit 1
        fi
        
        # 验证WASM文件是否生成
        if [ ! -f "main.wasm" ]; then
          echo "❌ WASM file not generated for ${{ matrix.plugin }}"
          exit 1
        fi
        
        echo "✅ WASM build successful for ${{ matrix.plugin }}"

        
    - name: Set WASM_PATH environment variable
      run: |
        echo "WASM_PATH=$(pwd)/plugins/wasm-go/extensions/${{ matrix.plugin }}/main.wasm" >> $GITHUB_ENV
        
    - name: Run tests with coverage for ${{ matrix.plugin }}
      working-directory: plugins/wasm-go/extensions/${{ matrix.plugin }}
      run: |
        # 检查是否存在main_test.go文件
        if [ -f "main_test.go" ]; then
          echo "Running tests for ${{ matrix.plugin }}..."
          
          # 运行测试并生成覆盖率报告
          gotestsum --junitfile ../../../../test-results-${{ matrix.plugin }}.xml \
                   --format standard-verbose \
                   --jsonfile ../../../../test-output-${{ matrix.plugin }}.json \
                   -- -coverprofile=coverage.out -covermode=atomic ./...
          
          echo "✅ Tests completed for ${{ matrix.plugin }}"
        else
          echo "No tests found for ${{ matrix.plugin }}, skipping..."
          # 创建空的测试结果文件
          echo '<?xml version="1.0" encoding="UTF-8"?><testsuites><testsuite name="no-tests" tests="0" failures="0" errors="0" time="0"></testsuite></testsuites>' > ../../../../test-results-${{ matrix.plugin }}.xml
        fi
        
    - name: Upload test results for ${{ matrix.plugin }}
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.plugin }}
        path: |
          test-results-${{ matrix.plugin }}.xml
          test-output-${{ matrix.plugin }}.json
        retention-days: 30
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./plugins/wasm-go/extensions/${{ matrix.plugin }}/coverage.out
        flags: ${{ matrix.plugin }}-tests
        name: codecov-${{ matrix.plugin }}
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}

  test-summary:
    name: Test Summary & Coverage
    runs-on: ubuntu-latest
    needs: [detect-changed-plugins, test]
    if: always() && needs.detect-changed-plugins.outputs.has-changes == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
        
    - name: Generate comprehensive test summary
      run: |
        echo "## 🧪 Go Plugin Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        total_plugins=0
        passed_plugins=0
        failed_plugins=0
        total_tests=0
        total_failures=0
        total_errors=0
        
        echo "### 📊 Test Results by Plugin" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for result_file in test-results-*.xml; do
          if [ -f "$result_file" ]; then
            plugin_name=$(echo "$result_file" | sed 's/test-results-\(.*\)\.xml/\1/')
            total_plugins=$((total_plugins + 1))
            
            # 检查WASM文件状态
            wasm_file="plugins/wasm-go/extensions/$plugin_name/main.wasm"
            if [ -f "$wasm_file" ]; then
              wasm_status="✅"
            else
              wasm_status="❌"
            fi
            
            # 解析XML获取测试结果
            if grep -q '<testsuite' "$result_file"; then
              tests=$(grep -o 'tests="[0-9]*"' "$result_file" | head -1 | grep -o '[0-9]*')
              failures=$(grep -o 'failures="[0-9]*"' "$result_file" | head -1 | grep -o '[0-9]*')
              errors=$(grep -o 'errors="[0-9]*"' "$result_file" | head -1 | grep -o '[0-9]*')
              time=$(grep -o 'time="[0-9.]*"' "$result_file" | head -1 | grep -o '[0-9.]*')
              
              total_tests=$((total_tests + tests))
              total_failures=$((total_failures + failures))
              total_errors=$((total_errors + errors))
              
              if [ "$failures" = "0" ] && [ "$errors" = "0" ]; then
                echo "✅ **$plugin_name**: $tests tests passed in ${time}s | $wasm_status WASM" >> $GITHUB_STEP_SUMMARY
                passed_plugins=$((passed_plugins + 1))
              else
                echo "❌ **$plugin_name**: $tests tests, $failures failures, $errors errors in ${time}s | $wasm_status WASM" >> $GITHUB_STEP_SUMMARY
                failed_plugins=$((failed_plugins + 1))
              fi
            else
              echo "⚠️ **$plugin_name**: No tests found | $wasm_status WASM" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Coverage reports are now available on Codecov**" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Project Coverage**: https://codecov.io/gh/${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **This Commit Coverage**: https://codecov.io/gh/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "💡 **Coverage will be automatically commented on this PR**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🎯 Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Total plugins**: $total_plugins" >> $GITHUB_STEP_SUMMARY
        echo "- **Passed**: $passed_plugins ✅" >> $GITHUB_STEP_SUMMARY
        echo "- **Failed**: $failed_plugins ❌" >> $GITHUB_STEP_SUMMARY
        echo "- **Total tests**: $total_tests" >> $GITHUB_STEP_SUMMARY
        echo "- **Total failures**: $total_failures" >> $GITHUB_STEP_SUMMARY
        echo "- **Total errors**: $total_errors" >> $GITHUB_STEP_SUMMARY
        
        # 如果有失败，显示详细信息
        if [ $total_failures -gt 0 ] || [ $total_errors -gt 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ Failed Tests Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failed plugins**: $failed_plugins" >> $GITHUB_STEP_SUMMARY
          echo "**Total failures**: $total_failures" >> $GITHUB_STEP_SUMMARY
          echo "**Total errors**: $total_errors" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **View detailed logs**: [Click here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 显示每个失败插件的详细信息
          echo "#### 📊 Failed Plugin Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for result_file in test-results-*.xml; do
            if [ -f "$result_file" ]; then
              plugin_name=$(echo "$result_file" | sed 's/test-results-\(.*\)\.xml/\1/')
              
              # 检查是否有失败
              failures=$(grep -o 'failures="[0-9]*"' "$result_file" | head -1 | grep -o '[0-9]*')
              errors=$(grep -o 'errors="[0-9]*"' "$result_file" | head -1 | grep -o '[0-9]*')
              
              if [ "$failures" -gt 0 ] || [ "$errors" -gt 0 ]; then
                echo "**$plugin_name**:" >> $GITHUB_STEP_SUMMARY
                echo "- Failures: $failures" >> $GITHUB_STEP_SUMMARY
                echo "- Errors: $errors" >> $GITHUB_STEP_SUMMARY
                echo "- [View plugin logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
        fi
