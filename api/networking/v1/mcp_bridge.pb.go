// Copyright (c) 2022 Alibaba Group Holding Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: networking/v1/mcp_bridge.proto

// $schema: higress.networking.v1.McpBridge
// $title: McpBridge
// $description: Configuration affecting service discovery from multi registries
// $mode: none

package v1

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LoadBalanceMode defines the load balancing strategy
type LoadBalanceMode int32

const (
	LoadBalanceMode_ROUND_ROBIN LoadBalanceMode = 0
	LoadBalanceMode_WEIGHTED    LoadBalanceMode = 1
	LoadBalanceMode_RANDOM      LoadBalanceMode = 2
)

// Enum value maps for LoadBalanceMode.
var (
	LoadBalanceMode_name = map[int32]string{
		0: "ROUND_ROBIN",
		1: "WEIGHTED",
		2: "RANDOM",
	}
	LoadBalanceMode_value = map[string]int32{
		"ROUND_ROBIN": 0,
		"WEIGHTED":    1,
		"RANDOM":      2,
	}
)

func (x LoadBalanceMode) Enum() *LoadBalanceMode {
	p := new(LoadBalanceMode)
	*p = x
	return p
}

func (x LoadBalanceMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalanceMode) Descriptor() protoreflect.EnumDescriptor {
	return file_networking_v1_mcp_bridge_proto_enumTypes[0].Descriptor()
}

func (LoadBalanceMode) Type() protoreflect.EnumType {
	return &file_networking_v1_mcp_bridge_proto_enumTypes[0]
}

func (x LoadBalanceMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadBalanceMode.Descriptor instead.
func (LoadBalanceMode) EnumDescriptor() ([]byte, []int) {
	return file_networking_v1_mcp_bridge_proto_rawDescGZIP(), []int{0}
}

// <!-- crd generation tags
// +cue-gen:McpBridge:groupName:networking.higress.io
// +cue-gen:McpBridge:version:v1
// +cue-gen:McpBridge:storageVersion
// +cue-gen:McpBridge:annotations:helm.sh/resource-policy=keep
// +cue-gen:McpBridge:subresource:status
// +cue-gen:McpBridge:scope:Namespaced
// +cue-gen:McpBridge:resource:categories=higress-io,plural=mcpbridges
// +cue-gen:McpBridge:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=networking.higress.io/v1
// +genclient
// +k8s:deepcopy-gen=true
// -->
type McpBridge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Registries    []*RegistryConfig      `protobuf:"bytes,1,rep,name=registries,proto3" json:"registries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpBridge) Reset() {
	*x = McpBridge{}
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpBridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpBridge) ProtoMessage() {}

func (x *McpBridge) ProtoReflect() protoreflect.Message {
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpBridge.ProtoReflect.Descriptor instead.
func (*McpBridge) Descriptor() ([]byte, []int) {
	return file_networking_v1_mcp_bridge_proto_rawDescGZIP(), []int{0}
}

func (x *McpBridge) GetRegistries() []*RegistryConfig {
	if x != nil {
		return x.Registries
	}
	return nil
}

type RegistryConfig struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	// Type specifies the registry type (e.g., nacos, consul, zookeeper)
	Type                   string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name is the unique identifier for this registry configuration
	Name                   string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Domain is the registry server domain or IP address
	Domain                 string                 `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Port is the registry server port number
	Port                   uint32                 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// NacosAddressServer is the Nacos address server URL
	NacosAddressServer     string                 `protobuf:"bytes,5,opt,name=nacosAddressServer,proto3" json:"nacosAddressServer,omitempty"`
	// NacosAccessKey is the access key for Nacos authentication
	NacosAccessKey         string                 `protobuf:"bytes,6,opt,name=nacosAccessKey,proto3" json:"nacosAccessKey,omitempty"`
	// NacosSecretKey is the secret key for Nacos authentication
	NacosSecretKey         string                 `protobuf:"bytes,7,opt,name=nacosSecretKey,proto3" json:"nacosSecretKey,omitempty"`
	// NacosNamespaceId is the Nacos namespace ID
	NacosNamespaceId       string                 `protobuf:"bytes,8,opt,name=nacosNamespaceId,proto3" json:"nacosNamespaceId,omitempty"`
	// NacosNamespace is the Nacos namespace name
	NacosNamespace         string                 `protobuf:"bytes,9,opt,name=nacosNamespace,proto3" json:"nacosNamespace,omitempty"`
	// NacosGroups specifies the Nacos service groups to watch
	NacosGroups            []string               `protobuf:"bytes,10,rep,name=nacosGroups,proto3" json:"nacosGroups,omitempty"`
	// NacosRefreshInterval is the refresh interval for Nacos service discovery in seconds
	NacosRefreshInterval   int64                  `protobuf:"varint,11,opt,name=nacosRefreshInterval,proto3" json:"nacosRefreshInterval,omitempty"`
	// ConsulNamespace is the Consul namespace
	ConsulNamespace        string                 `protobuf:"bytes,12,opt,name=consulNamespace,proto3" json:"consulNamespace,omitempty"`
	// ZkServicesPath specifies the ZooKeeper service discovery paths
	ZkServicesPath         []string               `protobuf:"bytes,13,rep,name=zkServicesPath,proto3" json:"zkServicesPath,omitempty"`
	// ConsulDatacenter is the Consul datacenter name
	ConsulDatacenter       string                 `protobuf:"bytes,14,opt,name=consulDatacenter,proto3" json:"consulDatacenter,omitempty"`
	// ConsulServiceTag is the service tag filter for Consul service discovery
	ConsulServiceTag       string                 `protobuf:"bytes,15,opt,name=consulServiceTag,proto3" json:"consulServiceTag,omitempty"`
	// ConsulRefreshInterval is the refresh interval for Consul service discovery in seconds
	ConsulRefreshInterval  int64                  `protobuf:"varint,16,opt,name=consulRefreshInterval,proto3" json:"consulRefreshInterval,omitempty"`
	// AuthSecretName is the name of the secret containing authentication credentials
	AuthSecretName         string                 `protobuf:"bytes,17,opt,name=authSecretName,proto3" json:"authSecretName,omitempty"`
	// Protocol specifies the communication protocol (http, https, grpc)
	Protocol               string                 `protobuf:"bytes,18,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Sni is the Server Name Indication for TLS connections
	Sni                    string                 `protobuf:"bytes,19,opt,name=sni,proto3" json:"sni,omitempty"`
	// McpServerExportDomains specifies the domains to export via MCP server
	McpServerExportDomains []string               `protobuf:"bytes,20,rep,name=mcpServerExportDomains,proto3" json:"mcpServerExportDomains,omitempty"`
	// McpServerBaseUrl is the base URL for the MCP server
	McpServerBaseUrl       string                 `protobuf:"bytes,21,opt,name=mcpServerBaseUrl,proto3" json:"mcpServerBaseUrl,omitempty"`
	// EnableMCPServer enables or disables the MCP server functionality
	EnableMCPServer        *wrappers.BoolValue    `protobuf:"bytes,22,opt,name=enableMCPServer,proto3" json:"enableMCPServer,omitempty"`
	// EnableScopeMcpServers enables scoped MCP servers
	EnableScopeMcpServers  *wrappers.BoolValue    `protobuf:"bytes,23,opt,name=enableScopeMcpServers,proto3" json:"enableScopeMcpServers,omitempty"`
	// AllowMcpServers specifies the allowed MCP servers list
	AllowMcpServers        []string               `protobuf:"bytes,24,rep,name=allowMcpServers,proto3" json:"allowMcpServers,omitempty"`
	// Metadata contains additional key-value metadata for the registry
	Metadata               map[string]*InnerMap   `protobuf:"bytes,25,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// McpConfigRef is the name of the ConfigMap containing MCP configuration
	McpConfigRef           string                 `protobuf:"bytes,26,opt,name=mcpConfigRef,proto3" json:"mcpConfigRef,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RegistryConfig) Reset() {
	*x = RegistryConfig{}
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryConfig) ProtoMessage() {}

func (x *RegistryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryConfig.ProtoReflect.Descriptor instead.
func (*RegistryConfig) Descriptor() ([]byte, []int) {
	return file_networking_v1_mcp_bridge_proto_rawDescGZIP(), []int{1}
}

func (x *RegistryConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RegistryConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegistryConfig) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RegistryConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RegistryConfig) GetNacosAddressServer() string {
	if x != nil {
		return x.NacosAddressServer
	}
	return ""
}

func (x *RegistryConfig) GetNacosAccessKey() string {
	if x != nil {
		return x.NacosAccessKey
	}
	return ""
}

func (x *RegistryConfig) GetNacosSecretKey() string {
	if x != nil {
		return x.NacosSecretKey
	}
	return ""
}

func (x *RegistryConfig) GetNacosNamespaceId() string {
	if x != nil {
		return x.NacosNamespaceId
	}
	return ""
}

func (x *RegistryConfig) GetNacosNamespace() string {
	if x != nil {
		return x.NacosNamespace
	}
	return ""
}

func (x *RegistryConfig) GetNacosGroups() []string {
	if x != nil {
		return x.NacosGroups
	}
	return nil
}

func (x *RegistryConfig) GetNacosRefreshInterval() int64 {
	if x != nil {
		return x.NacosRefreshInterval
	}
	return 0
}

func (x *RegistryConfig) GetConsulNamespace() string {
	if x != nil {
		return x.ConsulNamespace
	}
	return ""
}

func (x *RegistryConfig) GetZkServicesPath() []string {
	if x != nil {
		return x.ZkServicesPath
	}
	return nil
}

func (x *RegistryConfig) GetConsulDatacenter() string {
	if x != nil {
		return x.ConsulDatacenter
	}
	return ""
}

func (x *RegistryConfig) GetConsulServiceTag() string {
	if x != nil {
		return x.ConsulServiceTag
	}
	return ""
}

func (x *RegistryConfig) GetConsulRefreshInterval() int64 {
	if x != nil {
		return x.ConsulRefreshInterval
	}
	return 0
}

func (x *RegistryConfig) GetAuthSecretName() string {
	if x != nil {
		return x.AuthSecretName
	}
	return ""
}

func (x *RegistryConfig) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *RegistryConfig) GetSni() string {
	if x != nil {
		return x.Sni
	}
	return ""
}

func (x *RegistryConfig) GetMcpServerExportDomains() []string {
	if x != nil {
		return x.McpServerExportDomains
	}
	return nil
}

func (x *RegistryConfig) GetMcpServerBaseUrl() string {
	if x != nil {
		return x.McpServerBaseUrl
	}
	return ""
}

func (x *RegistryConfig) GetEnableMCPServer() *wrappers.BoolValue {
	if x != nil {
		return x.EnableMCPServer
	}
	return nil
}

func (x *RegistryConfig) GetEnableScopeMcpServers() *wrappers.BoolValue {
	if x != nil {
		return x.EnableScopeMcpServers
	}
	return nil
}

func (x *RegistryConfig) GetAllowMcpServers() []string {
	if x != nil {
		return x.AllowMcpServers
	}
	return nil
}

func (x *RegistryConfig) GetMetadata() map[string]*InnerMap {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegistryConfig) GetMcpConfigRef() string {
	if x != nil {
		return x.McpConfigRef
	}
	return ""
}

type InnerMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InnerMap      map[string]string      `protobuf:"bytes,1,rep,name=inner_map,json=innerMap,proto3" json:"inner_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InnerMap) Reset() {
	*x = InnerMap{}
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InnerMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerMap) ProtoMessage() {}

func (x *InnerMap) ProtoReflect() protoreflect.Message {
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerMap.ProtoReflect.Descriptor instead.
func (*InnerMap) Descriptor() ([]byte, []int) {
	return file_networking_v1_mcp_bridge_proto_rawDescGZIP(), []int{2}
}

func (x *InnerMap) GetInnerMap() map[string]string {
	if x != nil {
		return x.InnerMap
	}
	return nil
}

// MCPInstance represents a single MCP instance configuration
type MCPInstance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Weight        int32                  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Priority      int32                  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	HealthPath    string                 `protobuf:"bytes,5,opt,name=healthPath,proto3" json:"healthPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPInstance) Reset() {
	*x = MCPInstance{}
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPInstance) ProtoMessage() {}

func (x *MCPInstance) ProtoReflect() protoreflect.Message {
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPInstance.ProtoReflect.Descriptor instead.
func (*MCPInstance) Descriptor() ([]byte, []int) {
	return file_networking_v1_mcp_bridge_proto_rawDescGZIP(), []int{3}
}

func (x *MCPInstance) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *MCPInstance) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MCPInstance) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *MCPInstance) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *MCPInstance) GetHealthPath() string {
	if x != nil {
		return x.HealthPath
	}
	return ""
}

// MCPConfig represents the complete MCP configuration
type MCPConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Instances       []*MCPInstance         `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	LoadBalanceMode LoadBalanceMode        `protobuf:"varint,2,opt,name=load_balance_mode,json=loadBalanceMode,proto3,enum=higress.networking.v1.LoadBalanceMode" json:"load_balance_mode,omitempty"`
	HealthCheck     *HealthConfig          `protobuf:"bytes,3,opt,name=healthCheck,proto3" json:"healthCheck,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MCPConfig) Reset() {
	*x = MCPConfig{}
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPConfig) ProtoMessage() {}

func (x *MCPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPConfig.ProtoReflect.Descriptor instead.
func (*MCPConfig) Descriptor() ([]byte, []int) {
	return file_networking_v1_mcp_bridge_proto_rawDescGZIP(), []int{4}
}

func (x *MCPConfig) GetInstances() []*MCPInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *MCPConfig) GetLoadBalanceMode() LoadBalanceMode {
	if x != nil {
		return x.LoadBalanceMode
	}
	return LoadBalanceMode_ROUND_ROBIN
}

func (x *MCPConfig) GetHealthCheck() *HealthConfig {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

// HealthConfig represents health check configuration
type HealthConfig struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Enabled            bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Interval           *duration.Duration     `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Timeout            *duration.Duration     `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	UnhealthyThreshold int32                  `protobuf:"varint,4,opt,name=unhealthyThreshold,proto3" json:"unhealthyThreshold,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HealthConfig) Reset() {
	*x = HealthConfig{}
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthConfig) ProtoMessage() {}

func (x *HealthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_networking_v1_mcp_bridge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthConfig.ProtoReflect.Descriptor instead.
func (*HealthConfig) Descriptor() ([]byte, []int) {
	return file_networking_v1_mcp_bridge_proto_rawDescGZIP(), []int{5}
}

func (x *HealthConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *HealthConfig) GetInterval() *duration.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *HealthConfig) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *HealthConfig) GetUnhealthyThreshold() int32 {
	if x != nil {
		return x.UnhealthyThreshold
	}
	return 0
}

var File_networking_v1_mcp_bridge_proto protoreflect.FileDescriptor

const file_networking_v1_mcp_bridge_proto_rawDesc = "" +
	"\n" +
	"\x1enetworking/v1/mcp_bridge.proto\x12\x15higress.networking.v1\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/duration.proto\"R\n" +
	"\tMcpBridge\x12E\n" +
	"\n" +
	"registries\x18\x01 \x03(\v2%.higress.networking.v1.RegistryConfigR\n" +
	"registries\"\xcf\t\n" +
	"\x0eRegistryConfig\x12\x18\n" +
	"\x04type\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1c\n" +
	"\x06domain\x18\x03 \x01(\tB\x04\xe2A\x01\x02R\x06domain\x12\x18\n" +
	"\x04port\x18\x04 \x01(\rB\x04\xe2A\x01\x02R\x04port\x12.\n" +
	"\x12nacosAddressServer\x18\x05 \x01(\tR\x12nacosAddressServer\x12&\n" +
	"\x0enacosAccessKey\x18\x06 \x01(\tR\x0enacosAccessKey\x12&\n" +
	"\x0enacosSecretKey\x18\a \x01(\tR\x0enacosSecretKey\x12*\n" +
	"\x10nacosNamespaceId\x18\b \x01(\tR\x10nacosNamespaceId\x12&\n" +
	"\x0enacosNamespace\x18\t \x01(\tR\x0enacosNamespace\x12 \n" +
	"\vnacosGroups\x18\n" +
	" \x03(\tR\vnacosGroups\x122\n" +
	"\x14nacosRefreshInterval\x18\v \x01(\x03R\x14nacosRefreshInterval\x12(\n" +
	"\x0fconsulNamespace\x18\f \x01(\tR\x0fconsulNamespace\x12&\n" +
	"\x0ezkServicesPath\x18\r \x03(\tR\x0ezkServicesPath\x12*\n" +
	"\x10consulDatacenter\x18\x0e \x01(\tR\x10consulDatacenter\x12*\n" +
	"\x10consulServiceTag\x18\x0f \x01(\tR\x10consulServiceTag\x124\n" +
	"\x15consulRefreshInterval\x18\x10 \x01(\x03R\x15consulRefreshInterval\x12&\n" +
	"\x0eauthSecretName\x18\x11 \x01(\tR\x0eauthSecretName\x12\x1a\n" +
	"\bprotocol\x18\x12 \x01(\tR\bprotocol\x12\x10\n" +
	"\x03sni\x18\x13 \x01(\tR\x03sni\x126\n" +
	"\x16mcpServerExportDomains\x18\x14 \x03(\tR\x16mcpServerExportDomains\x12*\n" +
	"\x10mcpServerBaseUrl\x18\x15 \x01(\tR\x10mcpServerBaseUrl\x12D\n" +
	"\x0fenableMCPServer\x18\x16 \x01(\v2\x1a.google.protobuf.BoolValueR\x0fenableMCPServer\x12P\n" +
	"\x15enableScopeMcpServers\x18\x17 \x01(\v2\x1a.google.protobuf.BoolValueR\x15enableScopeMcpServers\x12(\n" +
	"\x0fallowMcpServers\x18\x18 \x03(\tR\x0fallowMcpServers\x12O\n" +
	"\bmetadata\x18\x19 \x03(\v23.higress.networking.v1.RegistryConfig.MetadataEntryR\bmetadata\x12\"\n" +
	"\fmcpConfigRef\x18\x1a \x01(\tR\fmcpConfigRef\x1a\\\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x125\n" +
	"\x05value\x18\x02 \x01(\v2\x1f.higress.networking.v1.InnerMapR\x05value:\x028\x01\"\x93\x01\n" +
	"\bInnerMap\x12J\n" +
	"\tinner_map\x18\x01 \x03(\v2-.higress.networking.v1.InnerMap.InnerMapEntryR\binnerMap\x1a;\n" +
	"\rInnerMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8d\x01\n" +
	"\vMCPInstance\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x16\n" +
	"\x06weight\x18\x03 \x01(\x05R\x06weight\x12\x1a\n" +
	"\bpriority\x18\x04 \x01(\x05R\bpriority\x12\x1e\n" +
	"\n" +
	"healthPath\x18\x05 \x01(\tR\n" +
	"healthPath\"\xe8\x01\n" +
	"\tMCPConfig\x12@\n" +
	"\tinstances\x18\x01 \x03(\v2\".higress.networking.v1.MCPInstanceR\tinstances\x12R\n" +
	"\x11load_balance_mode\x18\x02 \x01(\x0e2&.higress.networking.v1.LoadBalanceModeR\x0floadBalanceMode\x12E\n" +
	"\vhealthCheck\x18\x03 \x01(\v2#.higress.networking.v1.HealthConfigR\vhealthCheck\"\xc4\x01\n" +
	"\fHealthConfig\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x125\n" +
	"\binterval\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\binterval\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12.\n" +
	"\x12unhealthyThreshold\x18\x04 \x01(\x05R\x12unhealthyThreshold*<\n" +
	"\x0fLoadBalanceMode\x12\x0f\n" +
	"\vROUND_ROBIN\x10\x00\x12\f\n" +
	"\bWEIGHTED\x10\x01\x12\n" +
	"\n" +
	"\x06RANDOM\x10\x02B.Z,github.com/alibaba/higress/api/networking/v1b\x06proto3"

var (
	file_networking_v1_mcp_bridge_proto_rawDescOnce sync.Once
	file_networking_v1_mcp_bridge_proto_rawDescData []byte
)

func file_networking_v1_mcp_bridge_proto_rawDescGZIP() []byte {
	file_networking_v1_mcp_bridge_proto_rawDescOnce.Do(func() {
		file_networking_v1_mcp_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_networking_v1_mcp_bridge_proto_rawDesc), len(file_networking_v1_mcp_bridge_proto_rawDesc)))
	})
	return file_networking_v1_mcp_bridge_proto_rawDescData
}

var file_networking_v1_mcp_bridge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_networking_v1_mcp_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_networking_v1_mcp_bridge_proto_goTypes = []any{
	(LoadBalanceMode)(0),       // 0: higress.networking.v1.LoadBalanceMode
	(*McpBridge)(nil),          // 1: higress.networking.v1.McpBridge
	(*RegistryConfig)(nil),     // 2: higress.networking.v1.RegistryConfig
	(*InnerMap)(nil),           // 3: higress.networking.v1.InnerMap
	(*MCPInstance)(nil),        // 4: higress.networking.v1.MCPInstance
	(*MCPConfig)(nil),          // 5: higress.networking.v1.MCPConfig
	(*HealthConfig)(nil),       // 6: higress.networking.v1.HealthConfig
	nil,                        // 7: higress.networking.v1.RegistryConfig.MetadataEntry
	nil,                        // 8: higress.networking.v1.InnerMap.InnerMapEntry
	(*wrappers.BoolValue)(nil), // 9: google.protobuf.BoolValue
	(*duration.Duration)(nil),  // 10: google.protobuf.Duration
}
var file_networking_v1_mcp_bridge_proto_depIdxs = []int32{
	2,  // 0: higress.networking.v1.McpBridge.registries:type_name -> higress.networking.v1.RegistryConfig
	9,  // 1: higress.networking.v1.RegistryConfig.enableMCPServer:type_name -> google.protobuf.BoolValue
	9,  // 2: higress.networking.v1.RegistryConfig.enableScopeMcpServers:type_name -> google.protobuf.BoolValue
	7,  // 3: higress.networking.v1.RegistryConfig.metadata:type_name -> higress.networking.v1.RegistryConfig.MetadataEntry
	8,  // 4: higress.networking.v1.InnerMap.inner_map:type_name -> higress.networking.v1.InnerMap.InnerMapEntry
	4,  // 5: higress.networking.v1.MCPConfig.instances:type_name -> higress.networking.v1.MCPInstance
	0,  // 6: higress.networking.v1.MCPConfig.load_balance_mode:type_name -> higress.networking.v1.LoadBalanceMode
	6,  // 7: higress.networking.v1.MCPConfig.healthCheck:type_name -> higress.networking.v1.HealthConfig
	10, // 8: higress.networking.v1.HealthConfig.interval:type_name -> google.protobuf.Duration
	10, // 9: higress.networking.v1.HealthConfig.timeout:type_name -> google.protobuf.Duration
	3,  // 10: higress.networking.v1.RegistryConfig.MetadataEntry.value:type_name -> higress.networking.v1.InnerMap
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_networking_v1_mcp_bridge_proto_init() }
func file_networking_v1_mcp_bridge_proto_init() {
	if File_networking_v1_mcp_bridge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_networking_v1_mcp_bridge_proto_rawDesc), len(file_networking_v1_mcp_bridge_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_networking_v1_mcp_bridge_proto_goTypes,
		DependencyIndexes: file_networking_v1_mcp_bridge_proto_depIdxs,
		EnumInfos:         file_networking_v1_mcp_bridge_proto_enumTypes,
		MessageInfos:      file_networking_v1_mcp_bridge_proto_msgTypes,
	}.Build()
	File_networking_v1_mcp_bridge_proto = out.File
	file_networking_v1_mcp_bridge_proto_goTypes = nil
	file_networking_v1_mcp_bridge_proto_depIdxs = nil
}
