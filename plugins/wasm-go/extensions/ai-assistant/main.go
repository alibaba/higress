// File generated by hgctl. Modify as required.
// See: https://higress.io/zh-cn/docs/user/wasm-go#2-%E7%BC%96%E5%86%99-maingo-%E6%96%87%E4%BB%B6

package main

import (
	"net/url"

	"github.com/alibaba/higress/plugins/wasm-go/extensions/ai-assistant/config"
	"github.com/alibaba/higress/plugins/wasm-go/extensions/ai-assistant/util"
	"github.com/alibaba/higress/plugins/wasm-go/pkg/wrapper"
	"github.com/higress-group/proxy-wasm-go-sdk/proxywasm"
	"github.com/higress-group/proxy-wasm-go-sdk/proxywasm/types"
	"github.com/tidwall/gjson"
)

func main() {
	wrapper.SetCtx(
		"ai-assistant",
		wrapper.ParseConfigBy(parseConfig),
		wrapper.ProcessRequestHeadersBy(onHttpRequestHeader),
		wrapper.ProcessRequestBodyBy(onHttpRequestBody),
	)
}

func parseConfig(json gjson.Result, config *config.PluginConfig, log wrapper.Log) error {
	config.FromJson(json)
	if err := config.Validate(); err != nil {
		return err
	}
	if err := config.Complete(); err != nil {
		return err
	}
	return nil
}

func onHttpRequestHeader(ctx wrapper.HttpContext, config config.PluginConfig, log wrapper.Log) types.Action {
	rawPath := ctx.Path()
	path, _ := url.Parse(rawPath)
	if path.Path != "/query" {
		_ = util.SendResponse(400, util.MimeTypeTextPlain, "Unsupported request path: "+path.Path)
		return types.ActionContinue
	}

	method := ctx.Method()
	switch method {
	case "GET":
		content := path.Query().Get("content")
		return processAiRequest(ctx, content, config, log)
	case "POST":
		contentType, _ := proxywasm.GetHttpRequestHeader("Content-Type")
		if contentType != "application/json" {
			_ = util.SendResponse(400, util.MimeTypeTextPlain, "Unsupported content type: "+contentType)
		}
		return types.ActionContinue
	default:
		_ = util.SendResponse(400, util.MimeTypeTextPlain, "Unsupported request method: "+method)
		return types.ActionContinue
	}
}

func onHttpRequestBody(ctx wrapper.HttpContext, config config.PluginConfig, body []byte, log wrapper.Log) types.Action {
	bodyJson := gjson.ParseBytes(body)
	content := bodyJson.Get("content").String()
	return processAiRequest(ctx, content, config, log)
}

func processAiRequest(ctx wrapper.HttpContext, content string, config config.PluginConfig, log wrapper.Log) types.Action {
	if content == "" {
		_ = util.SendResponse(400, util.MimeTypeTextPlain, "Missing query content.")
		return types.ActionContinue
	}

	if action, err := config.GetProvider().ProcessChatRequest(ctx, content, log); err == nil {
		return action
	} else {
		_ = util.SendResponse(500, util.MimeTypeTextPlain, "Failed to call AI service: "+err.Error())
		return types.ActionContinue
	}
}
