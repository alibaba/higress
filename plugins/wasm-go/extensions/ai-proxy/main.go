// File generated by hgctl. Modify as required.
// See: https://higress.io/zh-cn/docs/user/wasm-go#2-%E7%BC%96%E5%86%99-maingo-%E6%96%87%E4%BB%B6

package main

import (
	"fmt"
	"github.com/higress-group/proxy-wasm-go-sdk/proxywasm"
	"net/url"
	"strings"

	"github.com/alibaba/higress/plugins/wasm-go/extensions/ai-proxy/config"
	"github.com/alibaba/higress/plugins/wasm-go/extensions/ai-proxy/provider"
	"github.com/alibaba/higress/plugins/wasm-go/extensions/ai-proxy/util"
	"github.com/alibaba/higress/plugins/wasm-go/pkg/wrapper"
	"github.com/higress-group/proxy-wasm-go-sdk/proxywasm/types"
	"github.com/tidwall/gjson"
)

const (
	pluginName = "ai-proxy"

	ctxKeyApiName = "apiKey"
)

func main() {
	wrapper.SetCtx(
		pluginName,
		wrapper.ParseConfigBy(parseConfig),
		wrapper.ProcessRequestHeadersBy(onHttpRequestHeader),
		wrapper.ProcessRequestBodyBy(onHttpRequestBody),
		wrapper.ProcessResponseHeadersBy(onHttpResponseHeaders),
		wrapper.ProcessResponseBodyBy(onHttpResponseBody),
	)
}

func parseConfig(json gjson.Result, pluginConfig *config.PluginConfig, log wrapper.Log) error {
	pluginConfig.FromJson(json)
	if err := pluginConfig.Validate(); err != nil {
		return err
	}
	if err := pluginConfig.Complete(); err != nil {
		return err
	}
	return nil
}

func onHttpRequestHeader(ctx wrapper.HttpContext, pluginConfig config.PluginConfig, log wrapper.Log) types.Action {
	if pluginConfig.GetProvider() == nil {
		ctx.DontReadRequestBody()
		return types.ActionContinue
	}

	rawPath := ctx.Path()
	path, _ := url.Parse(rawPath)
	apiName := getApiName(path.Path)
	if apiName == "" {
		_ = util.SendResponse(404, util.MimeTypeTextPlain, "API not found: "+path.Path)
		return types.ActionContinue
	}
	ctx.SetContext(ctxKeyApiName, apiName)

	pointcuts := pluginConfig.GetProvider().GetPointcuts()
	if _, has := pointcuts[provider.PointcutOnRequestHeaders]; has {
		action, err := pluginConfig.GetProvider().OnApiRequestHeaders(ctx, apiName, log)
		if err == nil {
			return action
		}
		_ = util.SendResponse(404, util.MimeTypeTextPlain, fmt.Sprintf("failed to process request headers: %v", err))
		return types.ActionContinue
	}
	if _, has := pointcuts[provider.PointcutOnRequestBody]; !has {
		ctx.DontReadRequestBody()
	}
	return types.ActionContinue
}

func onHttpRequestBody(ctx wrapper.HttpContext, pluginConfig config.PluginConfig, body []byte, log wrapper.Log) types.Action {
	if pluginConfig.GetProvider() == nil {
		return types.ActionContinue
	}

	pointcuts := pluginConfig.GetProvider().GetPointcuts()
	if _, has := pointcuts[provider.PointcutOnRequestBody]; has {
		apiName := ctx.GetContext(ctxKeyApiName).(provider.ApiName)
		action, err := pluginConfig.GetProvider().OnApiRequestBody(ctx, apiName, body, log)
		if err == nil {
			return action
		}
		_ = util.SendResponse(404, util.MimeTypeTextPlain, fmt.Sprintf("failed to process request body: %v", err))
		return types.ActionContinue
	}
	return types.ActionContinue
}

func onHttpResponseHeaders(ctx wrapper.HttpContext, pluginConfig config.PluginConfig, log wrapper.Log) types.Action {
	if pluginConfig.GetProvider() == nil {
		ctx.DontReadResponseBody()
		return types.ActionContinue
	}

	status, err := proxywasm.GetHttpResponseHeader(":status")
	if err != nil || status != "200" {
		if err != nil {
			log.Errorf("unable to load :status header from response: %v", err)
		}
		ctx.DontReadResponseBody()
		return types.ActionContinue
	}
	pointcuts := pluginConfig.GetProvider().GetPointcuts()
	if _, has := pointcuts[provider.PointcutOnResponseHeaders]; has {
		apiName := ctx.GetContext(ctxKeyApiName).(provider.ApiName)
		action, err := pluginConfig.GetProvider().OnApiResponseHeaders(ctx, apiName, log)
		if err == nil {
			return action
		}
		_ = util.SendResponse(404, util.MimeTypeTextPlain, fmt.Sprintf("failed to process response headers: %v", err))
		return types.ActionContinue
	}
	if _, has := pointcuts[provider.PointcutOnResponseBody]; !has {
		ctx.DontReadResponseBody()
	}
	return types.ActionContinue
}

func onHttpResponseBody(ctx wrapper.HttpContext, pluginConfig config.PluginConfig, body []byte, log wrapper.Log) types.Action {
	if pluginConfig.GetProvider() == nil {
		return types.ActionContinue
	}

	log.Debugf("response body: %s", string(body))
	pointcuts := pluginConfig.GetProvider().GetPointcuts()
	if _, has := pointcuts[provider.PointcutOnResponseBody]; has {
		apiName := ctx.GetContext(ctxKeyApiName).(provider.ApiName)
		action, err := pluginConfig.GetProvider().OnApiResponseBody(ctx, apiName, body, log)
		if err == nil {
			return action
		}
		_ = util.SendResponse(404, util.MimeTypeTextPlain, fmt.Sprintf("failed to process response body: %v", err))
		return types.ActionContinue
	}
	return types.ActionContinue
}

func getApiName(path string) provider.ApiName {
	if strings.HasSuffix(path, "/v1/chat/completions") {
		return provider.ApiNameChatCompletion
	}
	return ""
}
