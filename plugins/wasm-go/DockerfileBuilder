# The Dockerfile for wasm-go builder only support amd64 and arm64 yet.
# If you want to build on another architecture, the following information may be helpful.
#
# - arch: amd64
#   base image: docker.io/ubuntu
#   go_url: https://golang.google.cn/dl/go1.20.1.linux-amd64.tar.gz"
#   tinygo_url: https://github.com/alibaba/higress/releases/download/v1.0.0-rc/higress-tinygo0.25.0.linux-amd64.tar.gz
#   oras_url: https://github.com/oras-project/oras/releases/download/v1.0.0/oras_1.0.0_linux_amd64.tar.gz
#
# - arch: arm64
#   base image: docker.io/ubuntu
#   go_url: https://golang.google.cn/dl/go1.20.1.linux-arm64.tar.gz
#   tinygo_url: https://github.com/alibaba/higress/releases/download/v1.0.0-rc/higress-tinygo0.25.0.linux-arm64.tar.gz
#   oras_url: https://github.com/oras-project/oras/releases/download/v1.0.0/oras_1.0.0_linux_arm64.tar.gz
#
# - arch: armel
#   base image: build yourself
#   go_url: install from source code
#   tinygo_url: build yourself
#   oras_url: build your self
#
# - arch: i386
#   base image: build yourself
#   go_url: https://dl.google.com/go/go1.20.1.linux-386.tar.gz
#   tinygo_url: build yourself
#   oras_url: build your self
#
# - arch: mips64el
#   base image: build your self
#   go_url: https://dl.google.com/go/go1.20.1.linux-386.tar.gz
#   tinygo_url: build your self
#   oras_url: build your self
#
# - arch: ppc64el
#   base image: build your self
#   go_url: https://dl.google.com/go/go1.20.1.linux-ppc64le.tar.gz
#   tinygo_url: build your self
#   oras_url: build your self
#
# - arch: s390x
#   base image: docker.io/ubuntu
#   go_url: https://dl.google.com/go/go1.20.1.linux-s390x.tar.gz
#   tinygo_url: build your self
#   oras_url: build your self
#
# - arch: armhf
#   base image: build your self
#   go_url: https://golang.google.cn/dl/go1.20.1.linux-armv6l.tar.gz
#   tinygo_url: https://github.com/tinygo-org/tinygo/releases/download/v0.25.0/tinygo_0.25.0_armhf.deb
#   oras_url: build your self

ARG BASE_IMAGE=docker.io/ubuntu
FROM $BASE_IMAGE

ARG GO_VERSION
ARG TINYGO_VERSION
ARG ORAS_VERSION
ARG HIGRESS_VERSION
ARG USE_HIGRESS_TINYGO

LABEL go_version=$GO_VERSION tinygo_version=$TINYGO_VERSION oras_version=$ORAS_VERSION

RUN apt-get update \
  && apt-get install -y wget \
  && rm -rf /var/lib/apt/lists/*

RUN arch="$(dpkg --print-architecture)"; arch="${arch##*-}"; \
    go_url=; \
    tinygo_url=; \
    go_version=${GO_VERSION:-1.19}; \
    tinygo_version=${TINYGO_VERSION:-0.25.0}; \
    oras_version=${ORAS_VERSION:-1.0.0}; \
    higress_version=${HIGRESS_VERSION:-1.0.0-rc}; \
    use_higress_tinygo=${USE_HIGRESS_TINYGO:-false}; \
    echo "arch:           '$arch'"; \
    echo "go go_version:  '$go_version'"; \
    echo "tinygo_version: '$tinygo_version'"; \
    echo "oras_version: '$oras_version'"; \
    echo "higress_version: '$higress_version'"; \
    echo "use_higress_tinygo: '$use_higress_tinygo'"; \
    case "$arch" in \
        'amd64') \
            go_url="https://golang.google.cn/dl/go$go_version.linux-amd64.tar.gz"; \
            if [ "$use_higress_tinygo" = "true" ]; \
            then \
                tinygo_url="https://github.com/alibaba/higress/releases/download/v$higress_version/higress-tinygo${tinygo_version}.linux-amd64.tar.gz"; \
            else \
                tinygo_url="https://github.com/tinygo-org/tinygo/releases/download/v$tinygo_version/tinygo${tinygo_version}.linux-amd64.tar.gz"; \
            fi; \
            oras_url="https://github.com/oras-project/oras/releases/download/v$oras_version/oras_${oras_version}_linux_amd64.tar.gz"; \
            ;; \
        'arm64') \
            go_url="https://golang.google.cn/dl/go$go_version.linux-arm64.tar.gz"; \
            if [ "$use_higress_tinygo" = "true" ]; \
            then \
                tinygo_url="https://github.com/alibaba/higress/releases/download/v$higress_version/higress-tinygo${tinygo_version}.linux-arm64.tar.gz"; \
            else \
                tinygo_url="https://github.com/tinygo-org/tinygo/releases/download/v$tinygo_version/tinygo${tinygo_version}.linux-arm64.tar.gz"; \
            fi; \
            oras_url="https://github.com/oras-project/oras/releases/download/v$oras_version/oras_${oras_version}_linux_arm64.tar.gz"; \
            ;; \
        *) echo >&2 "error: unsupported architecture '$arch' "; exit 1 ;; \
    esac; \
    echo "go_url: '$go_url'"; \
    wget -O go.tgz "$go_url" --progress=dot:giga; \
    rm -rf /usr/local/go && tar -C /usr/local -xzf go.tgz && rm -rf go.tgz; \
    echo "tinygo_url: '$tinygo_url'"; \
    wget -O tinygo.tgz "$tinygo_url" --progress=dot:giga; \
    rm -rf /usr/local/tinygo && tar -C /usr/local -xzf tinygo.tgz && rm -rf tinygo.tgz; \
    echo "oras_url: '$oras_url'"; \
    wget -O oras.tgz "$oras_url" --progress=dot:giga; \
    tar -C /usr/local/bin -xzf oras.tgz && rm -rf oras.tgz; \
    echo "done";

ENV PATH=$PATH:/usr/local/go/bin:/usr/local/tinygo/bin:/usr/local/bin
